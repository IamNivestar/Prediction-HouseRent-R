lm_model <- train(Rent ~ ., data = train_set,
method = 'lm',
)
write.table(df, file = "house_rent_processed.csv", row.names = F, sep = ",", fileEncoding = "UTF-8")
setwd("C:/Users/Amaury/Desktop/Prediction-HouseRent-R")
df <- read.csv("house_rent_processed.csv", header = TRUE, encoding = "UTF-8")
setwd("C:/Users/Amaury/Desktop/Prediction-HouseRent-R")
df <- read.csv("house_rent_processed.csv", header = TRUE, encoding = "UTF-8")
#transformando variaveis categoricas
df$BHK <- as.factor(df$BHK)
df$Current_floor <- as.factor(df$Current_floor)
df$Total_floor <- as.factor(df$Total_floor)
df$Area_type <- as.factor(df$Area_type)
df$Area_locality <- as.factor(df$Area_locality)
df$City <- as.factor(df$City)
df$Furnishing_status <- as.factor(df$Furnishing_status)
df$Tenant_preferred <- as.factor(df$Tenant_preferred)
df$Bathroom <- as.factor(df$Bathroom)
df$Contact <- as.factor(df$Contact)
df <- df %>%
relocate(Rent, .after = Contact) #realocando aluguel para o final para facilitar a visualizacao
library(dplyr)
df <- df %>%
relocate(Rent, .after = Contact) #realocando aluguel para o final para facilitar a visualizacao
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
View(train_set )
test_set = df[-samples_rows,] # o restante é teste
library(caret)
new_df <- data.frame(df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
lm_model <- train(Rent ~ ., data = train_set,
method = 'lm',
)
lm_model.training <-predict(lm_model, train_set)
lm_model.testing <- predict(lm_model, test_set)
cor_train <- cor(train_set$Rent, lm_model.training)
cor_test <- cor(test_set$Rent, lm_model.testing)
cat(cor_train, cor_test)
cat(cor_train^2, cor_test^2)
test_set$predicted <- lm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
cat(Error_sum, Error_sum2)
cat(Error_sum2)
Error_sum2
library(gbm)
install.packages("gbm")
library(gbm)
new_df <- data.frame(df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
n.trees = 500)
str(new_df)
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10)
gbm_model.training <-predict(lm_model, train_set)
gbm_model.training <-predict(gbm_model, train_set)
df <- read.csv("house_rent_processed.csv", header = TRUE, encoding = "UTF-8")
#transformando variaveis categoricas
df$BHK <- as.factor(df$BHK)
df$Current_floor <- as.factor(df$Current_floor)
df$Total_floor <- as.factor(df$Total_floor)
df$Area_type <- as.factor(df$Area_type)
df$City <- as.factor(df$City)
df$Furnishing_status <- as.factor(df$Furnishing_status)
df$Tenant_preferred <- as.factor(df$Tenant_preferred)
df$Bathroom <- as.factor(df$Bathroom)
df$Contact <- as.factor(df$Contact)
df <- df %>%
relocate(Rent, .after = Contact) #realocando aluguel para o final para facilitar a visualizacao
new_df <- data.frame(df)
str(df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10)
new_df$Area_locality = as.numeric(factor(new_df$Area_locality))
new$Area_locality
new_df$Area_locality
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
plot(train_set$Rent, gbm_model.training, col = "blue")
summary(gbm_model)
summary(gbm_model)
summary(gbm_model.testing)
str(gbm_model)
str(gbm_model.testing)
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train, cor_test)
cat(cor_train^2, cor_test^2)
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
?mae()
mae(gbm_model)
MAE(gbm_model)
MAE(gbm_model, gbm_model.testing)
MAE(gbm_model.training, gbm_model.testing)
MAE(gbm_model, gbm_model.training, gbm_model.testing)
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train, cor_test)
cat(cor_train^2, cor_test^2) # R2 Score
