cor_test <- cor(test_set$Rent, tree_model.testing)
r2Score <- cat(cor_train^2, cor_test^2)
r2Score
test_set$predicted <- tree_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum <- summary(test_set$porcent_error)
Error_sum
str(df)
setwd("C:/Users/Amaury/Desktop/Prediction-HouseRent-R")
df <- read.csv("house_rent_processed.csv", header = TRUE, encoding = "UTF-8")
dim(df)
aluguel_90p <- quantile(df$Rent,0.9)
df <- df[df$Rent < aluguel_90p,]  #passarei a usar o dataset filtrado
dim(df)
#transformando variaveis categoricas
df$BHK <- as.factor(df$BHK)
df$Current_floor <- as.factor(df$Current_floor)
df$Total_floor <- as.factor(df$Total_floor)
df$Area_type <- as.factor(df$Area_type)
df$City <- as.factor(df$City)
df$Furnishing_status <- as.factor(df$Furnishing_status)
df$Tenant_preferred <- as.factor(df$Tenant_preferred)
df$Bathroom <- as.factor(df$Bathroom)
df$Contact <- as.factor(df$Contact)
df$Area_locality <- as.factor(df$Area_locality)
df <- df %>%
relocate(Rent, .after = Contact) #realocando aluguel para o final para facilitar a visualizacao
new_df <- data.frame(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
View(train_set )
test_set = df[-samples_rows,] # o restante é teste
new_df <- data.frame(df)
library(rpart)
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
plot(train_set$Rent, tree_model.training, col = "blue")
plot(test_set$Rent, tree_model.testing, col = "green")
summary(tree_model)
#analisando correlação
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
test_set$predicted <- tree_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum <- summary(test_set$porcent_error)
Error_sum
new_df <- data.frame(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
View(train_set )
test_set = df[-samples_rows,] # o restante é teste
library(gbm)
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
new_df <- data.frame(df)
df$Area_locality <- as.numeric(df$Area_locality)
new_df <- data.frame(df)
str(new_df)
df <- read.csv("house_rent_processed.csv", header = TRUE, encoding = "UTF-8")
aluguel_90p <- quantile(df$Rent,0.9)
df <- df[df$Rent < aluguel_90p,]  #passarei a usar o dataset filtrado
#transformando variaveis categoricas
df$BHK <- as.factor(df$BHK)
df$Current_floor <- as.factor(df$Current_floor)
df$Total_floor <- as.factor(df$Total_floor)
df$Area_type <- as.factor(df$Area_type)
df$City <- as.factor(df$City)
df$Furnishing_status <- as.factor(df$Furnishing_status)
df$Tenant_preferred <- as.factor(df$Tenant_preferred)
df$Bathroom <- as.factor(df$Bathroom)
df$Contact <- as.factor(df$Contact)
df <- df %>%
relocate(Rent, .after = Contact) #realocando aluguel para o final para facilitar a visualizacao
str(df)
new_df <- data.frame(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
test_set = df[-samples_rows,] # o restante é teste
library(gbm)
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
new_df$Area_locality <- as.factor(new_df$Area_locality)
new_df$Area_locality <- as.numeric(as.factor(new_df$Area_locality))
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
View(train_set )
test_set = df[-samples_rows,] # o restante é teste
dim(train_set)
dim(test_set)
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
str(new_df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
View(train_set )
test_set = new_df[-samples_rows,] # o restante é teste
library(gbm)
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
num <- test_set$Rent - predict(gbm_model, test_set)
mape <- mean( abs( num/test_set$Rent ) )*100
cat(R2)
cat(100-mape)
plot(train_set$Rent, gbm_model.training, col = "blue")
plot(test_set$Rent, gbm_model.testing, col = "red")
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
Error_gbm1 <- Error_sum2
gbm_model.training <-predict(gbm_model, train_set)
d
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence,
las = 2
)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
num <- test_set$Rent - predict(gbm_model, test_set)
mape <- mean( abs( num/test_set$Rent ) )*100
cat(R2)
plot(train_set$Rent, gbm_model.training, col = "blue")
plot(test_set$Rent, gbm_model.testing, col = "red")
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
new_df <- data.frame(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
test_set = df[-samples_rows,] # o restante é teste
dim(train_set)
new_df <- data.frame(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
test_set = df[-samples_rows,] # o restante é teste
library(caret)
lm_model <- lm(Rent ~ ., data = train_set)
summary(lm_model)
lm_model.training <-predict(lm_model, train_set)
lm_model.testing <- predict(lm_model, test_set)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
new_df$Current_floor <- NULL
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
test_set = df[-samples_rows,] # o restante é teste
library(caret)
lm_model <- lm(Rent ~ ., data = train_set)
summary(lm_model)
lm_model.training <-predict(lm_model, train_set)
lm_model.testing <- predict(lm_model, test_set)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
new_df$Current_floor <- NULL
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
lm_model <- lm(Rent ~ ., data = train_set)
summary(lm_model)
lm_model.training <-predict(lm_model, train_set)
lm_model.testing <- predict(lm_model, test_set)
new_df <- data.frame(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
library(caret)
lm_model <- model(Rent ~ ., data = train_set, mode="lm")
lm_model <- lm(Rent ~ ., data = train_set, mode="lm")
lm_model <- lm(Rent ~ ., data = train_set)
summary(lm_model)
library(rpart)
new_df <- data.frame(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
library(rpart)
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
library(rpart)
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
plot(train_set$Rent, tree_model.training, col = "blue")
plot(test_set$Rent, tree_model.testing, col = "green")
summary(tree_model)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
library(rpart)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
test_set$predicted <- tree_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum <- summary(test_set$porcent_error)
Error_sum
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
new_df <- data.frame(df)
new_df$Area_locality <- NULL
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
str(new_df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
tree_model <- rpart( Rent ~ .,
data= train_set,)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
tree_model <- rpart( Rent ~ .,
data= train_set,
control = rpart.control(cp=0))
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
library(rpart)
tree_model <- rpart( Rent ~ .,
data= train_set,
control = rpart.control(cp=0.1))
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
library(rpart)
tree_model <- rpart( Rent ~ .,
data= train_set,
control = rpart.control(cp=0.001))
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
tree_model <- rpart( Rent ~ .,
data= train_set,
control = rpart.control(cp=0.001),
maxdepth = 5)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
tree_model <- rpart( Rent ~ .,
data= train_set,
control = rpart.control(cp=0.001),
minsplit=5)
tree_model.training <- predict(tree_model, train_set)
tree_model.testing <- predict(tree_model, test_set)
cor_train <- cor(train_set$Rent, tree_model.training)
cor_test <- cor(test_set$Rent, tree_model.testing)
cat(cor_train^2, cor_test^2) #r2Score
library(e1071)
library(caret)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
svm_model <- svm(Rent ~ ., data=train_set)
summary(svm_model)
svm_model.training <-predict(svm_model, train_set)
svm_model.testing <- predict(svm_model, test_set)
plot(train_set$Rent, svm_model.training, col = "blue")
plot(test_set$Rent, svm_model.testing, col = "red")
MAE(new_df$Rent, predict(svm_model))
RMSE(new_df$Rent, predict(svm_model))
cor_train <- cor(train_set$Rent, svm_model.training)
cor_test <- cor(test_set$Rent, svm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
new_df$Furnishing_status <- NULL
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
svm_model <- svm(Rent ~ ., data=train_set)
summary(svm_model)
svm_model.training <-predict(svm_model, train_set)
svm_model.testing <- predict(svm_model, test_set)
plot(train_set$Rent, svm_model.training, col = "blue")
plot(test_set$Rent, svm_model.testing, col = "red")
MAE(new_df$Rent, predict(svm_model))
RMSE(new_df$Rent, predict(svm_model))
cor_train <- cor(train_set$Rent, svm_model.training)
cor_test <- cor(test_set$Rent, svm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- svm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_svm <- summary(test_set$porcent_error)
Error_svm
plot(train_set$Rent, svm_model.training, col = "blue")
abline(coef = c(0, 1))
par()
plot(train_set$Rent, svm_model.training, col = "blue")
abline(coef = c(0, 1))
par(mar = c(5, 8, 1, 1))
plot(train_set$Rent, svm_model.training, col = "blue")
abline(coef = c(0, 1))
par(mar = c(8, 8, 1, 1))
plot(train_set$Rent, svm_model.training, col = "blue")
abline(coef = c(0, 1))
par(mar = c(8, 8, 2, 1))
plot(train_set$Rent, svm_model.training, col = "blue")
par(mar = c(4, 4, 1, 1))
plot(train_set$Rent, svm_model.training, col = "blue")
par(mar = c(5, 4, 1, 1))
plot(train_set$Rent, svm_model.training, col = "blue")
par(mar = c(5, 5, 1, 1))
plot(train_set$Rent, svm_model.training, col = "blue")
abline(coef = c(0, 1))
plot(test_set$Rent, svm_model.testing, col = "red")
abline(coef = c(0, 1))
df <- read.csv("house_rent_processed.csv", header = TRUE, encoding = "UTF-8")
boxplot(df$Rent, horizontal=TRUE, col='steelblue')
boxplot(df$Rent, horizontal=TRUE, col='steelblue', title="Rent")
boxplot(df$Rent, horizontal=TRUE, col='steelblue', xlab="Rent")
boxplot(df$Rent[df$Rent < 3500000], horizontal=TRUE, col='steelblue',  xlab="Rent")
# percentil 90# preco
aluguel_90p <- quantile(df$Rent,0.9)
boxplot(df$Rent[df$Rent <  aluguel_90p], horizontal=TRUE, col='steelblue', xlab="Rent")
