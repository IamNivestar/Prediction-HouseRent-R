df <- read.csv("House_Rent_Dataset.csv", header = TRUE, encoding = "UTF-8")
# não irei considerar o tempo em que foi publicado já que a diferença não ultrapassa 3 meses,
# caso fossem anos, poderiam haver um influencia externa de uma temporada para outra, como inflação, etc...
df$Posted.On <- NULL
#renomeando algumas colunas
names(df) <- c("BHK", "Rent","Size","Floor", "Area_type","Area_locality", "City", "Furnishing_status",
"Tenant_preferred", "Bathroom", "Contact")
# retirando a palavra Area desnecessária
df$Area_type <- gsub(" Area", "", df$Area_type)
# retirando a palavra Contact desnecessária
df$Contact <- gsub("Contact ", "", df$Contact)
# retirando a palavra Contact desnecessária
df$Floor <- gsub("Ground", "0", df$Floor)
df$Floor <- gsub("Lower Basement", "-1", df$Floor)
df$Floor <- gsub("Upper Basement", "-2", df$Floor)
library(stringr)
library(dplyr)
setwd("C:/Users/Amaury/Desktop/Prediction-HouseRent-R")
df <- read.csv("House_Rent_Dataset.csv", header = TRUE, encoding = "UTF-8")
# não irei considerar o tempo em que foi publicado já que a diferença não ultrapassa 3 meses,
# caso fossem anos, poderiam haver um influencia externa de uma temporada para outra, como inflação, etc...
df$Posted.On <- NULL
#renomeando algumas colunas
names(df) <- c("BHK", "Rent","Size","Floor", "Area_type","Area_locality", "City", "Furnishing_status",
"Tenant_preferred", "Bathroom", "Contact")
# retirando a palavra Area desnecessária
df$Area_type <- gsub(" Area", "", df$Area_type)
# retirando a palavra Contact desnecessária
df$Contact <- gsub("Contact ", "", df$Contact)
# retirando a palavra Contact desnecessária
df$Floor <- gsub("Ground", "0", df$Floor)
df$Floor <- gsub("Lower Basement", "-1", df$Floor)
df$Floor <- gsub("Upper Basement", "-2", df$Floor)
library(stringr)
library(dplyr)
df %>%
filter( str_detect(df$Floor, "out of")) %>%
df$Total_floor <- sub(".*of ", "", df$Floor)
df$Total_floor <- sub(".*of ", "", df$Floor)
df[df$Floor == "-2",] #verificando se os imóveis sem o andar informado foram coletados
df[df$Floor == "-1",] #não houve problemas nos imóveis lower ou upper basement
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df %>%
mutate( Total_floor = ifelse(Floor == '0', 1, Total_floor))
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df %>%
mutate( Total_floor = ifelse(Floor == '0', 1, Total_floor))
df %>%
df <- mutate( Total_floor = ifelse(Floor == '0', 1, Total_floor))
df <- mutate( Total_floor = ifelse(df$Floor == '0', 1, df$Total_floor))
df <- mutate( df$Total_floor = ifelse(df$Floor == '0', 1, df$Total_floor))
df2 <- mutate( df$Total_floor = ifelse(df$Floor == '0', 1, df$Total_floor))
x <- df %>%
mutate( Total_floor = ifelse(Floor == '0', 1, Total_floor))
View(x)
x[x$Floor == "0",]
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df$Total_floor <- df %>%
filter(str_detect( df$Floor, "out of"))
df$Total_floor <- NULL
df$Total_floor <- sub(".*of ", "", df$Floor)
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df$Total_floor <- NULL
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df$Total_floor <- df %>%
filter(str_detect( df$Floor, "out of"))
?sub
df$Total_floor <- df %>%
df$Total_floor <- NULL %>%
filter(str_detect( df$Floor, "out of")) %>%
sub(".*of ", "", df$Floor)
df$Total_floor <- df %>%
df$Total_floor <- NULL %>%
filter(str_detect( df$Floor, "out of")) %>%
sub(".*of ", "", df$Floor)
df$Total_floor <- NULL %>%
df$Total_floor <- df %>%
filter(str_detect( df$Floor, "out of")) %>%
sub(".*of ", "", df$Floor)
df$Total_floor <- NULL %>%
df$Total_floor <- df %>%
filter(str_detect( df$Floor, "out of")) %>%
sub(".*of ", "", df$Floor)
df$Total_floor <- NULL %>%
df$Total_floor <- df %>%
filter(str_detect( df$Floor, "out of")) %>%
sub(".*of ", "", df$Floor)
df$Total_floor <- NULL
df$Total_floor <- df %>%
filter(str_detect( df$Floor, "out of")) %>%
sub(".*of ", "", df$Floor)
filtrados <- df %>%
filter(str_detect( df$Floor, "out of"))
View(filtrados)
df$Total_floor <- NULL
df$Total_floor <- sub(".*of ", "", filtrados)
df$Total_floor <- sub(".*of ", "", filtrados$Floor)
df$Total_floor <- NULL
df$Total_floor <- sub(".*of ", "", filtrados$Floor)
df$Total_floor <- NULL
filtrados <- df %>%
filter(str_detect( df$Floor, "out of"))
filtrados2 <- sub(".*of ", "", filtrados$Floor)
(filtrados2)
lenght(filtrados2)
nrows(filtrados2)
nrow(filtrados2)
ncol(filtrados2)
filtrados$Total_floor <- sub(".*of ", "", filtrados$Floor)
ncol(filtrados)
dim(filtrados)
dim(df)
df <- df %>%
filter(str_detect( df$Floor, "out of"))
df$Total_floor <- sub(".*of ", "", df$Floor)
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df <- read.csv("House_Rent_Dataset.csv", header = TRUE, encoding = "UTF-8")
# não irei considerar o tempo em que foi publicado já que a diferença não ultrapassa 3 meses,
# caso fossem anos, poderiam haver um influencia externa de uma temporada para outra, como inflação, etc...
df$Posted.On <- NULL
#renomeando algumas colunas
names(df) <- c("BHK", "Rent","Size","Floor", "Area_type","Area_locality", "City", "Furnishing_status",
"Tenant_preferred", "Bathroom", "Contact")
# retirando a palavra Area desnecessária
df$Area_type <- gsub(" Area", "", df$Area_type)
# retirando a palavra Contact desnecessária
df$Contact <- gsub("Contact ", "", df$Contact)
# retirando a palavra Contact desnecessária
df$Floor <- gsub("Ground", "0", df$Floor)
df$Floor <- gsub("Lower Basement", "-1", df$Floor)
df$Floor <- gsub("Upper Basement", "-2", df$Floor)
library(stringr)
library(dplyr)
df$Total_floor <- sub(".*of ", "", df$Floor)
df[df$Floor == "-2",] #verificando se os imóveis sem o andar informado foram coletados
df[df$Floor == "-1",] #não houve problemas nos imóveis lower ou upper basement
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
x <- df %>%
mutate( Total_floor = ifelse(Floor == '0', 1, Total_floor))
x[x$Floor == "0",]
df <- df %>%
mutate( Total_floor = ifelse(Floor == '0', 1, Total_floor))
df[df$Floor == "0",] # houve um caso de um andar sendo salvo como zero, irei corrigir manualmente por ser único
df[df$Floor == "1",]
df[df$Floor == "2",]
df[df$Floor == "3",]
#pipeline para criação do aluguel média por cidade
Average_rent <- df %>%
group_by(City) %>%
summarise(mean(Rent))
View(Average_rent)
df %>%
filter(is.na(Total_floor))
str(df)
is.na(df)
filter(is.na(df))
df[is.na(df)]
df[is.na(df),]
library(ggplot2)
install.packages('ggplot2')
ggplot(df, aes(x=Rent))
ggplot(df, aes(x=Rent , y))
library(ggplot2)
ggplot(df, aes(x=Rent , y))
count_floor <- df %>%
group_by(Floor) %>%
ggplot(df, aes(x=Rent , y = count_floor))
count_floor <- df %>%
group_by(Floor)
ggplot(df, aes(x=Rent , y = count_floor))
ggplot(df, aes(x=Floor , y = count_floor))
ggplot(df, aes(x=Floor , y = count_floor))
str(count_floor)
Vew(count_floor)
View(count_floor)
count_floor <- df %>%
group_by(Total_floor)
View(count_floor)
count_floor <- table(df$Total_floor)
View(count_floor)
ggplot(df, aes(x=Total_floor , y = count_floor))
ggplot(df, aes(x=Rent , y = count_floor))
View(count_floor)
View(count_floor$Total_floor)
View(count_floor[1])
count_floor
View(count_floor)
ggplot(as.data.frame(table(df)), aes(x=freq, y = Var1))
ggplot(as.data.frame(table(count_floor)), aes(x=freq, y = Var1))
ggplot(as.data.frame(table(count_floor)), aes(x=freq, y = Var1))+
geom_bar(stat="identity")
View(count_floor)
ggplot(as.data.frame(table(count_floor)), aes(x=Freq, y = Var1))+
geom_bar(stat="identity")
View(count_floor)
ggplot(as.data.frame(table(count_floor)), aes(x=Var1))+
geom_bar( y = Freq)
as.data.frame(table(count_floor)
View( as.data.frame(table(count_floor)))
View( as.data.frame(table(count_floor)))
View( as.data.frame(table(count_floor)))
ggplot(as.data.frame(table(count_floor)), aes(x=count_floor))+
geom_bar( y = Freq)
barplot(count_floor)
?barplot
View(count_floor)
View(count_floor)
x <- as.numeric(df$Total_floor)
str(x)
summary(x)
df$Total_floor <- as.numeric(df$Total_floor)
summary(df$Total_floor)
count_floor <- table(df$Total_floor)
View(count_floor)
barplot(count_floor)
barplot(count_floor, with= 5) #como esperado, imóveis com poucos andares são bem mais frequentes
barplot(count_floor, height = 5) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(15, 3, 3, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(12, 3, 3, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(12, 1, 1, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(1, 1, 1, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(1, 2, 1, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(1, 3, 3, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(1, 3, 2, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
#par(mar=c(1, 3, 2, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(5, 3, 2, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(2, 3, 2, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(2, 3, 2, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(2, 3, 2, 2))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(2, 3, 5, 2))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(2, 3, 1, 2))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(2, 3, 1, 5))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(1, 1, 1, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(3, 3, 3, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
par(mar=c(2, 3, 3, 1))
barplot(count_floor, ) #como esperado, imóveis com poucos andares são bem mais frequentes
ggplot(as.data.frame(table(count_floor)), aes(x=count_floor, y= Freq))+
geom_bar( y = Freq)
ggplot(as.data.frame(table(count_floor)), aes(x=count_floor))+
geom_bar( y = Freq)
ggplot(as.data.frame(table(count_floor)), aes(x=count_floor, y= Freq))+
geom_bar(stat = 'identity')
ggplot(as.data.frame(table(count_floor)), aes(x=count_floor, y= Freq))+
geom_bar(stat = 'identity')
hist(count_floor)
View(count_floor)
install.packages("pheatmap")
library("pheatmap")
dim(df)
set.seed(4)
train = df[samples_rows,]
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7)
train = df[samples_rows,]
View(train)
?cor
houses_cor <- cor(df ,method = 'spearman')
houses_cor <- cor(df$Rent ,method = 'spearman')
houses_cor <- cor(df$Rent, y=NULL ,method = 'spearman')
houses_cor <- cor(df$Rent, y=NULL, use = "everything", method = 'spearman')
houses_cor <- cor(df$Rent, y=NULL, use = "everything")
pairs(df)
pairs(df)
houses_cor <- cor(df$Rent, y=df$Size, use = "everything")
cor(df$Rent, y=df$Size, use = "everything")
cor(df$Rent, y=df$Size)
cor(df$Rent, y=df$Size, method="spearman")
cor(df$Rent, y=df$Size, method="kendall")
cor(df$Rent, y=df$Size, method="spearman")
