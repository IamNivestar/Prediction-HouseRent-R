new_df <- data.frame(df)
setwd("C:/Users/Amaury/Desktop/Prediction-HouseRent-R")
df <- read.csv("house_rent_processed.csv", header = TRUE, encoding = "UTF-8")
# percentil 90# preco
aluguel_90p <- quantile(df$Rent,0.9)
df <- df[df$Rent < aluguel_90p,]  #passarei a usar o dataset filtrado
#transformando variaveis categoricas
df$BHK <- as.factor(df$BHK)
df$Current_floor <- as.factor(df$Current_floor)
df$Total_floor <- as.factor(df$Total_floor)
df$Area_type <- as.factor(df$Area_type)
df$Area_locality <- as.factor(df$Area_locality)
df$City <- as.factor(df$City)
df$Furnishing_status <- as.factor(df$Furnishing_status)
df$Tenant_preferred <- as.factor(df$Tenant_preferred)
df$Bathroom <- as.factor(df$Bathroom)
df$Contact <- as.factor(df$Contact)
df <- df %>%
relocate(Rent, .after = Contact) #realocando aluguel para o final para facilitar a visualizacao
str(df)
library(dplyr)
df <- df %>%
relocate(Rent, .after = Contact) #realocando aluguel para o final para facilitar a visualizacao
summary(df$Area_locality)
dim(df)
set.seed(4) #definindo semente pois vou buscar valores aleatórios
samples_rows <- sample(1:length(df$BHK), length(df$BHK)*0.7) # 70% para treino
train_set = df[samples_rows,]  # dados de treino
View(train_set )
test_set = df[-samples_rows,] # o restante é teste
library(caret)
new_df <- data.frame(df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
lm_model <- train(Rent ~ ., data = train_set,
method = 'lm',
)
#lm_model <- lm( Rent ~ ., data= train)
summary(lm_model)
lm_model.training <-predict(lm_model, train_set)
lm_model.training <-predict(lm_model, train_set)
lm_model.testing <- predict(lm_model, test_set)
plot(train_set$Rent, lm_model.training, col = "blue")
plot(test_set$Rent, lm_model.testing, col = "red")
cor_train <- cor(train_set$Rent, lm_model.training)
cor_test <- cor(test_set$Rent, lm_model.testing)
cat(cor_train, cor_test)
cat(cor_train^2, cor_test^2)
test_set$predicted <- lm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
cat(Error_sum, Error_sum2)
Error_sum, Error_sum2
Error_sum
Error_sum2
library(gbm)
new_df <- data.frame(df)
new_df$Area_locality = as.numeric(factor(new_df$Area_locality))
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
plot(train_set$Rent, gbm_model.training, col = "blue")
plot(test_set$Rent, gbm_model.testing, col = "red")
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train, cor_test)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
library(Metrics)
install.packages('Metrics')
library(Metrics)
mse(test_set$Rent, predict(gbm_model,test_set))
summarygbm_model)
summar(y)gbm_model)
summary(gbm_model)
str(gbm_model)
gbm_model
install.packages('MLmetrics')
library(MLmetrics)
MAE(predict(gbm_model), test_set$Rent)
MAE(predict(gbm_model), test_set$Rent)
MAE(gbm_model.testing, test_set$Rent)
View(gbm_model.testing)
View(gbm_model.training)
MAE(predict(gbm_model)$Rent, test_set$Rent)
MAE(predict(gbm_model), test_set$Rent)
gbm.perf(gbm.fit, method = "cv")
gbm_model.perf(gbm_model.fit, method = "cv")
gbm.perf(gbm_model.fit, method = "cv")
gbm.perf(gbm_model, method = "cv")
par(mfrow = c(1, 2))
summary(gbm1, n.trees = 1
summary(gbm1, n.trees = 1)
summary(gbm1, n.trees = 1)
summary(gbm_model, n.trees = 1)
mean( (gbm+model_testing - test_set$Rent)^2)
mean( (gbm_model_testing - test_set$Rent)^2)
mean( (gbm_model.testing - test_set$Rent)^2)
mean( (gbm_model.testing - test_set$Rent)^2)
r <- as.numeric(gbm_model$cv.statistics[3])
rsq = round(r^2,2)
rsq
summary(gbm_model)
r <- as.numeric(gbm_model$cv.statistics[3])
rsq = round(r^2,2)
rsq
rsq = round(r^2,2)
r <- as.numeric(gbm_model$cv.error)
rsq = round(r^2,2)
rsq
num <- var(predictgbm_model)-test_set
num <- var(predict(gbm_model)-test_set
num <- var(predict(gbm_model)-test_set)
den <- var(test_set$Rent)
num <- var(predict(gbm_model)-test_set)
num <- var(predict(gbm_model)-test_set$Rent)
den <- var(test_set$Rent)
R2 <- 1-(num/den)
print(R2)
sqrt(min(gbm_modelt$cv.error))
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
summary(
gbm.fit.final,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
num <- var(predict(gbm_model)-test_set$Rent)
den <- var(test_set$Rent)
R2 <- 1-(num/den)
print(R2)
num <- var(predict(gbm_model, test_set$Rent))
den <- var(test_set$Rent)
num <- var(predict(gbm_model, test_set))
den <- var(test_set$Rent)
R2 <- 1-(num/den)
print(R2)
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
num <- test_set$Rent - predict(gbm_model, test_set)
R2 <- mean( abs( num/test_set$Rent ) )*100
print(R2)
num <- test_set$Rent - predict(gbm_model, test_set)
mape <- mean( abs( num/test_set$Rent ) )*100
print(R2, 100-mape)
cat(R2)
cat(100-mape)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
str(new_df)
new_df$Area_type <- NULL
new_df$Current_floor <- NULL
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
summary(gbm_model)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
num <- test_set$Rent - predict(gbm_model, test_set)
mape <- mean( abs( num/test_set$Rent ) )*100
cat(R2)
cat(100-mape)
plot(train_set$Rent, gbm_model.training, col = "blue")
plot(test_set$Rent, gbm_model.testing, col = "red")
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
new_df <- data.frame(df)
new_df$Area_locality <- NULL
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
summary(gbm_model)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
num <- test_set$Rent - predict(gbm_model, test_set)
mape <- mean( abs( num/test_set$Rent ) )*100
cat(R2)
cat(100-mape)
plot(train_set$Rent, gbm_model.training, col = "blue")
plot(test_set$Rent, gbm_model.testing, col = "red")
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
summary(gbm_model)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
num <- test_set$Rent - predict(gbm_model, test_set)
mape <- mean( abs( num/test_set$Rent ) )*100
cat(R2)
cat(100-mape)
plot(train_set$Rent, gbm_model.training, col = "blue")
plot(test_set$Rent, gbm_model.testing, col = "red")
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
new_df$Area_type <- NULL
library(gbm)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
str(new_df)
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
sqrt(min(gbm_model$cv.error))
gbm.perf(gbm_model, method = "cv")
par(mar = c(5, 8, 1, 1))
summary(
gbm_model,
cBars = 10,
method = relative.influence, # also can use permutation.test.gbm
las = 2
)
gbm_model.training <-predict(gbm_model, train_set)
gbm_model.testing <- predict(gbm_model, test_set)
num <- test_set$Rent - predict(gbm_model, test_set)
mape <- mean( abs( num/test_set$Rent ) )*100
cat(R2)
cat(100-mape)
plot(train_set$Rent, gbm_model.training, col = "blue")
plot(test_set$Rent, gbm_model.testing, col = "red")
MAE(new_df$Rent, predict(gbm_model))
RMSE(new_df$Rent, predict(gbm_model))
cor_train <- cor(train_set$Rent, gbm_model.training)
cor_test <- cor(test_set$Rent, gbm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- gbm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
install.packages('e1071')
library(e1071)
library(caret)
new_df <- data.frame(df)
new_df$Area_locality <- NULL
new_df$Tenant_preferred <- NULL
new_df$Area_type <- NULL
samples_rows <- sample(1:length(new_df$BHK), length(new_df$BHK)*0.7) # 70% para treino
train_set = new_df[samples_rows,]  # dados de treino
test_set = new_df[-samples_rows,] # o restante é teste
gbm_model <- gbm(Rent ~ ., data = train_set,
distribution = "gaussian",
cv.folds = 10,
shrinkage = .01,
n.minobsinnode = 10,
n.trees = 500)
svm_model <- svm(Rent ~ ., data=train_set)
summary(svm_model)
svm_model.training <-predict(svm_model, train_set)
svm_model.testing <- predict(svm_model, test_set)
plot(train_set$Rent, svm_model.training, col = "blue")
plot(test_set$Rent, svm_model.testing, col = "red")
MAE(new_df$Rent, predict(svm_model))
RMSE(new_df$Rent, predict(svm_model))
cor_train <- cor(train_set$Rent, svm_model.training)
cor_test <- cor(test_set$Rent, svm_model.testing)
cat(cor_train^2, cor_test^2) # R2 Score
test_set$predicted <- svm_model.testing
test_set$porcent_error <- round(test_set$predicted / test_set$Rent, 2)
test_set$porcent_error <- abs(test_set$porcent_error-1)
Error_sum2 <- summary(test_set$porcent_error)
Error_sum2
